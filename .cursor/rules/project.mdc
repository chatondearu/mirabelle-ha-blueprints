---
description: 
globs: 
alwaysApply: true
---
# Project Rules

## Project Structure
- Keep blueprints organized in appropriate subdirectories (automations, scripts, scenes, dashboards)
- Maintain documentation in the `docs` directory

## Core Requirements
- Home Assistant version: 2025.5.3 or later
- All blueprints must be prefixed with `[CDA]`
- All documentation must be in English
- All code must follow Home Assistant best practices

## Directory Structure
```
mirabelle-ha-blueprints/
â”œâ”€â”€ blueprints/
â”‚   â”œâ”€â”€ automations/
â”‚   â”œâ”€â”€ scripts/
â”‚   â”œâ”€â”€ scenes/
â”‚   â””â”€â”€ dashboards/
â”œâ”€â”€ docs/
â””â”€â”€ scripts/
```

## Naming Conventions
- Use kebab-case for filenames
- Include emojis in blueprint names
- Use descriptive names
- Follow pattern: `[CDA] ðŸ”” name-of-blueprint`

## Documentation
- Write in English only
- Include installation instructions
- Provide clear examples
- Document all parameters
- Add troubleshooting section

## Version Control
- Use semantic versioning (x.y.z)
- Write clear commit messages
- Follow conventional commits:
  - feat: new feature
  - fix: bug fix
  - docs: documentation
  - style: formatting
  - refactor: code refactoring

## Testing
- Test in clean HA installation
- Verify all parameters
- Check edge cases
- Test with latest HA version

## Security
- No sensitive data in blueprints
- Use proper input validation
- Follow HA security guidelines
- Document security considerations

## Maintenance
- Keep docs up to date
- Update for HA changes
- Monitor deprecation warnings
- Maintain backward compatibility

## Project Structure
- Keep blueprints organized in appropriate subdirectories (automations, scripts, scenes, dashboards)
- Maintain documentation in the `docs` directory
- Use clear and descriptive filenames
- Follow the established directory structure:
  ```
  mirabelle-ha-blueprints/
  â”œâ”€â”€ blueprints/
  â”‚   â”œâ”€â”€ automations/
  â”‚   â””â”€â”€ scripts/
  â”œâ”€â”€ docs/
  â””â”€â”€ README.md
  ```

## Blueprint Development
- Use clear and descriptive names
- Include comprehensive input parameters
- Provide sensible defaults
- Add helpful descriptions for each parameter
- Use proper selectors for input types
- Make triggers optional when possible
- Support multiple trigger types

## Code Style
- Use consistent YAML formatting
- Add comments for complex logic
- Use descriptive variable names
- Follow Home Assistant best practices
- Keep blueprints modular and reusable

## User Experience
- Provide clear installation instructions
- Include usage examples
- Document prerequisites
- Add troubleshooting guides
- Make configuration intuitive

## Contribution Guidelines
- Fork the repository
- Create a new branch
- Follow the established structure
- Update documentation
- Submit a pull request

## Best Practices
- Keep blueprints simple and focused
- Use descriptive names
- Provide clear documentation
- Include examples
- Make configuration flexible
- Support multiple use cases
- Consider edge cases
- Test thoroughly
- Document changes
- Keep code clean and maintainable
- Keep all texts in english (no other language)

## Commit & Push after modification

After any change to configuration files (e.g. blueprints, scripts, settings, documentation, README, etc.), you must:

1. Commit the changes locally with a clear and explicit message.
2. Push the changes to the remote repository to ensure project traceability and synchronization.